classdef Predictor < handle
  properties (GetAccess=public)
    id
    weights
    latest_inputs
    alpha=0.00001       %learning rate
    iternum = 15   
    subsetmask_sensor
    subsetmask_motor
  end


  methods
  %constructor
  % Mask is for producing different subset
  function obj = Predictor(sensory_size, motor_size, output_sensory_size, range, sensormask, motormask)
     inputsize = sensory_size +  motor_size + 1;
     outputsize = output_sensory_size;
     obj.weights = rand(inputsize, outputsize)*range-0.5;
     obj.subsetmask_sensor = sensormask;
     obj.subsetmask_motor = motormask;
  end


    function pred_sensors = prediction(obj, sensors, motors)
      %do the masking
      maskarray = dec2bin(obj.subsetmask_sensor, 8);
      masksensors = [];
      for i=1:7
         if maskarray(i) == '1'
            masksensors = [masksensors, sensors(i)];
         end
      end

      maskarray = dec2bin(obj.subsetmask_motor, 8);
      maskmotors = [];
      for i=1:7
          if maskarray(i) == '1'
             maskmotors = [maskmotors, motors(i)];
          end
      end

      inputs = [1, masksensors, maskmotors];
      pred_sensors = inputs*obj.weights;     
    end


    function obj = updateWeights(obj, errors)
      len = length(errors);
      %mask the latest_input
      maskarray_sensor = dec2bin(obj.subsetmask_sensor, 8);
      mask_input = [];
      for i=2:9
             if maskarray_sensor(i-1) == '1'
               mask_input = [mask_input, obj.latest_inputs(i)];
             end
      end


      maskarray_motor = dec2bin(obj.subsetmask_motor, 8);
      maskmotors = [];
      for i=1:8
        if maskarray_motor(i) == '1'
          maskmotors = [maskmotors, obj.latest_inputs(i+7)];
        end
      end

      
      mask_input = [1, mask_input, maskmotors];
      
      for j = 1:obj.iternum
        for i = 1:len
          w = obj.weights(:,i)';
          error = errors(i);
          obj.weights(:,i) = w + obj.alpha*error*mask_input;
        end
      end

    end
 

  function perror = getError(obj, sensory_input, pred_input)
     mask_sensory_input = [];
     maskarray = dec2bin(obj.subsetmask_sensor, 8);
      for i=1:7
         if maskarray(i) == '1'
            mask_sensory_input = [mask_sensory_input, sensory_input(i)];
         end
      end
     perror = mask_sensory_input - pred_input;
  end
  
  end
end
